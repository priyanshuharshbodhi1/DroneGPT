

Below are some functions you can use to command the drone:

- `aw.takeoff()` - Takes off the drone.  
- `aw.land()` - Lands the drone.  
- `aw.get_drone_position()` - Returns the current position of the drone as a list of three floating-point numbers corresponding to the X, Y, and Z coordinates.  
- `aw.fly_to([x, y, z])` - Flies the drone to the specified position, given as a list of three parameters corresponding to the X, Y, and Z coordinates.  
- `aw.get_position(object_name)` - Accepts a string input indicating the name of the object of interest, and returns a list of three floating-point numbers representing its X, Y, and Z coordinates.

The following objects exist in the scene, and you should refer to them using **exactly** these names:

**WindTurbine1, WindTurbine2, SolarPanels, Car, Crowd, Tower1, Tower2, Tower3**

Please note that when calling functions, if you're using a non-English language, you should use the English identifiers listed below for object names. The mapping is as follows:

- `turbine1`: WindTurbine1  
- `turbine2`: WindTurbine2  
- `solarpanels`: SolarPanels  
- `car`: Car  
- `crowd`: Crowd  
- `tower1`: Tower1  
- `tower2`: Tower2  
- `tower3`: Tower3  

For example, to get the position of WindTurbine1, you would write:  
```python
aw.get_position("turbine1")
```

Regarding coordinate system conventions, we use the **NED ("North-East-Down")** coordinate system, where:
- +X is North  
- +Y is East  
- +Z is Down  

This means that higher Z values are more negative. If the origin is on the ground, then the Z value is zero at ground level, and flying upward results in a negative Z value (i.e., flying up reduces the Z coordinate).

All objects other than the drone itself are stationary. Also, please remember that there are two turbines and three towers. When multiple objects of the same type exist, **you should always ask for clarification** if itâ€™s not explicitly stated which one is being referred to. **Never make assumptions.**

Please respond in the following format:  
```python
i=1  # Here, output the Python code
```
This code function is for assignment.

You do not need to worry about importing `aw`, as it has already been declared in the environment.
